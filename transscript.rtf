{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 AvenirNext-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\deftab560
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural

\f0\b\fs44 \cf0 Masterclass Sass 
\b0\fs34 \
\

\b Contents\

\b0 \
In todays lesson we'll talk about Sass. It's a popular tool for writing stylesheets. \
\
The lesson is broken down is small chapters explaining a bit of theory, then we have a little exercise.\
\
00 Introduction - what is Sass?\
01 Setting up\
02 How to structure your files\
03 Variables\
04 Nesting\
05 Mixins\
06 Extends / Inheritance\
07 \
\

\b 00 Introduction - what is Sass?
\b0 \
\
Sass is a CSS preprocessor that gives you more features to write your stylesheet markup. It has become the industry standard since it has been invented ... years ago. \
\
How does it work? You write your stylesheet in .scss and the compiler reads it and transforms the files into .css file that your browser understands.\
\
Some of the features of Sass are\
	\'95	variables\
	\'95	nesting\
	\'95	mixins\
	\'95	extends\
	\'95	functions\
\
We'll go over them one by one in this lesson.\
\

\b 01. Setting up
\b0 \
\
First we start with the configuration for sass. There are multiple ways to install Sass on your computer and run it. Today we'll use npm and gulp to compile it to your project. We'll be using gulp. Gulp is a build tool that enhances your workflow. \
\
	\'95	mkdir sass_project && npm init\
	\'95	git init\
	\'95	npm i gulp --save-dev\
\
In combination with sass it reads the files in your src/ directory, processes it and outputs it in the build/ directory.\
\

\i Exercise\
easy - git clone the repository to get the necessary files for using sass\
hard - set up a gulp file yourself that outputs the sass in the dist folder + add livereload to it.
\i0 \
\

\b Structuring your files\
\

\b0 There are a few conventions on how to structure your scss files. I'll tell you how they do it at Usabilla. So we have a couple of folders.\
\
cssreset\
\
global / partials / vendor \
\
global - vars, typography, utility classes, \
partials - all components \
vendor - 3rd party overrides\
\
style.css - importing all files, functions as a manifest file.\
\
using import and partials. Note - partials won't be compiled into css. A method in structuring your scss would be to use globbing or a manifest file in each directory. Example will be shown in the gulpfile.\
\

\i Exercise \
set up a basic folder structure in sass.
\i0 \
\

\b Variables
\b0 \
\
The first neat feature of Sass is the use of variables. An example of how a variable is used you can see here (in the slides) - the colors of your website are all kept in one file so that when they're really referenced to in the future and improves readability. Aside from that it's easy to change for example the accented color in one place.\
\
```\
	$primary-color: #ff0000\
	$secondary-color: #ff8888\
	$text-color-dark: #333333\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural
\cf0 --\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural
\cf0 \
but also margins\
\
```\
	$margin: 20px;\
	$padding: 20px;\
```\
\
Now we can have our typography and layout in one place.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural

\i \cf0 Exercise \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural

\i0 \cf0 \

\b Math
\b0 \
\
It's possible to use math inside of Sass. This can be usefull for building a modular fontsizes / typography system. Give example.\
\
The operators that are available are *, /, +, -, % (modulo)\
\
This is especially handy for creating a grid system.\
\

\b Nesting 
\b0 \
\
Another great feature of Sass is the ability to nest. It makes your stylesheets much cleaner and shorter. One note, don't nest too deep. Keep it one level deep. If you need more levels then it's better to start on a new line.\
\
```\
.nav \{\
	background: $primary-color;\
	height: 60px;\
\
	li \{\
		display: inline-block;\
		color: $text-color;\
	\}\
\}\
```\
\
will compile to \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural
\cf0 ```\
.nav \{\
	background: $primary-color;\
	height: 60px;\
\}\
\
.nav li \{\
	display: inline-block;\
	color: $text-color;\
\}\
```\
\
Sometimes it\'92s useful to use a nested rule\'92s parent selector in other ways than the default. For instance, you might want to have special styles for when that selector is hovered over or for when the body element has a certain class. In these cases, you can explicitly specify where the parent selector should be inserted using the & character. For example:\
\
```\
a \{\
	display: inline-block;\
	color: $link-color;\
	text-decoration: none;\
	\
	&:hover \{\
		text-decoration: underline; \
	\}\
\}\
```\
\
will be compiled to:\
\
```\
a \{\
	display: inline-block;\
	color: $link-color;\
	text-decoration: none;\
\}\
\
a:hover \{\
	text-decoration: underline; \
\}\
```\
\
With the ampersand symbol it's also possible to append selectors. \
\
```\
.nav \{\
	&--item \{\
		display: inline-block;\
	\}\
\}\
```\
\
output: \
\
```\
.nav--item \{\
	display: inline-block;	\
\}\
```\
\
Now we've actually added a new class! This is especially useful if we're applying the BEM methodology. Also when creating a grid system this can be used to create different column classes without typing it out i.e. the bootstrap grid columns .col-md-1, .col-xs-2, etc. More on that later. \
\
Pretty easy right? \
\
Exercise
\i \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural

\i0\b \cf0 Mixins\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural

\b0 \cf0 Mixins are blocks of code that you can reuse throughout your styles. The block of code defined in a mixin will be 'mixed in' wherever you include it in your rules. The syntax for that is as follows\
\
```\
@mixin border-radius($radius) \{\
	border-radius: $radius;\
\}\
\
.btn \{\
	@include border-radius(5);\
\}\
```\
\
output:\
\
```\
.btn \{\
	border-radius: 5px;\
\}\
```\
\
The code of the mixin itself will not be outputted in the css, so it's not \
\
Another cool thing about mixins is that it can accept arguments which can be used. It's similar to functions.\
\
Mixins can be useful for \
\
Handy mixins that are worth studying you can find here. Bourbon.io\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural

\b \cf0 Conventions
\b0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\li1120\fi-1120\sl336\slmult1\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\'95	}@mixin use camelCase. \
{\listtext	\'95	}@function use CaseCase. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\li1120\fi-1120\sl336\slmult1\pardirnatural
\ls2\ilvl0\cf0 Why? Because then it's easily spotted as a mixin or a function\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural
\cf0 Regardless of what format you choose, most important is to keep consistent.\
\
Put your @include on top of your selector scope. Be conscious of extend functionality. The extend rules will be places wherever the origin is located, so it will have an impact on the order of how the style rules will be outputted.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural

\b \cf0 Extends / Inheritance
\b0 \
\
With extends you can inherit styles from other classes or even placeholder classes using the % syntax. The difference between extend and mixins is that extend does not have the functionality to accept arguments and therefor does not have the added flexibility of mixins. But the advantage of using extends is the outputted css is a lot shorter.\
\
To give you an example\
\
```\
```\
will be outputted in \
```\
```\
\
Extends are useful\
\

\b Responsive design using Sass\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural

\b0 \cf0 With the knowledge we've gathered using Sass I'll show you some interesting ways where you can really help your responsive workflow. \
\
Check out this file ->\
\
Here's a mixin including the breakpoints for mobile, tablet and desktop screen sizes. The only thing that we now need to do in our scss files is to add it in our rules.\
\
Whenever you want to add a media query just do ->\
\
```\
.list-item \{\
	display: inline-block;\
\
	@include (tablet) \{\
		display: block;	\
	\}\
\}\
```\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural

\b \cf0 Challenge\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural

\b0 \cf0 Now that we've practised with all the different features of Sass, I'd like to propose a challenge for the rest of the day. That would be to setup style a landing page using Sass. I've included a few of them inside the repository, with all the necessary assets. I think this is a good way to practise.\
\
http://www.sassmeister.com/ \
play with sass in the browser. Same as codepen, but then only for sass.\
\
https://anotheruiguy.gitbooks.io/sassintherealworld_book-i\
a very complete book about sass with real world examples and best practises}